package org.javalaboratories.healthagents.configuration;

import lombok.Data;
import org.javalaboratories.healthagents.probes.CommandRendererFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configuration of Health-Agent server
 * <p>
 * Define general purpose Spring Beans required by this server in this class.
 */
@Configuration
public class ServiceConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(SecurityConfiguration.class);

    /**
     * Identifier of command-renderer factory retrieved from application
     * configuration.
     */
    @Value("${health-agents.probes.factory.command-renderer}")
    private String commandRendererFactory;

    /**
     * @return RsaSecurity spring bean object that determines the next rotation of
     * the security identifier.
     */
    @Bean
    public RsaSecurity rsaSecurity() {
        return new RsaSecurity();
    }

    /**
     * @return CommandRendererFactory spring bean. Leverages the
     * <code>commandRendererFactory</code> to determine correct abstract factory
     * of the Command-renderer.
     */
    @Bean
    public CommandRendererFactory commandRendererFactory() {
        if (commandRendererFactory == null || commandRendererFactory.isEmpty())
            logger.warn("Property probes.factory.command-renderer is undefined, default will apply");

        CommandRendererFactory result;
        try {
            result = CommandRendererFactory.getInstance(commandRendererFactory);
        } catch (IllegalArgumentException e) {
            logger.error("Command-renderer factory implementation undefined for '{}'",commandRendererFactory);
            throw e;
        }
        logger.info("Command-renderer factory configured to '{}'", commandRendererFactory.toUpperCase());
        return result;
    }

    @Data
    @ConfigurationProperties(value="health-agents.rsa-security")
    public static final class RsaSecurity {
        private boolean autoGenerated;
        private String securityId;
    }
}
